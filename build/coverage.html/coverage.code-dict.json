{"/home/travis/build/npmtest/node-npmtest-homebridge-ifttt/test.js":"/* istanbul instrument in package npmtest_homebridge_ifttt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-ifttt/lib.npmtest_homebridge_ifttt.js":"/* istanbul instrument in package npmtest_homebridge_ifttt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_ifttt = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_ifttt = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-ifttt/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-ifttt && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_ifttt */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_ifttt\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_ifttt.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_homebridge_ifttt.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_ifttt.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_homebridge_ifttt.__dirname + '/lib.npmtest_homebridge_ifttt.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-ifttt/node_modules/homebridge-ifttt/index.js":"// IFTTT Platform plugin for HomeBridge\n//\n// Remember to add platform to config.json. Example:\n// \"platforms\": [\n//             {\n//             \"platform\": \"IFTTT\",\n//             \"name\": \"IFTTT\",\n//             \"makerkey\": \"PUT KEY OF YOUR MAKER CHANNEL HERE\",\n//             \"accessories\": [{\n//                     \"name\": \"Accessory 1\",\n//                     \"buttons\": [\n//                     \t{\n//                     \t\t\"caption\": \"A1-1\",\n//                     \t\t\"triggerOn\": \"T1-1On\",\n//                     \t\t\"triggerOff\": \"T1-1Off\"\n//                     \t},{\n//                     \t\t\"caption\": \"A1-2\",\n//                     \t\t\"triggerOn\": \"T1-2On\",\n//                     \t\t\"triggerOff\": \"T1-2Off\"\n//                     \t},{\n//                     \t\t\"caption\": \"A1-3\",\n//                     \t\t\"trigger\": \"T1-3\"\n//                     \t},{\n//                     \t\t\"caption\": \"A1-4\",\n//                     \t\t\"trigger\": \"T1-4\"\n//                     \t}\n//                     ]\n//             \t}, {\n//                     \"name\": \"Accessory 2\",\n//                     \"buttons\": [\n//                     \t{\n//                     \t\t\"caption\": \"A2-1\",\n//                     \t\t\"trigger\": \"T2-1\"\n//                     \t},{\n//                     \t\t\"caption\": \"A2-2\",\n//                     \t\t\"trigger\": \"T2-2\"\n//                     \t},{\n//                     \t\t\"caption\": \"A2-3\",\n//                     \t\t\"trigger\": \"T2-3\"\n//                     \t},{\n//                     \t\t\"caption\": \"A2-4\",\n//                     \t\t\"trigger\": \"T2-4\"\n//                     \t}\n//                     ]\n//             \t}\n//             ]\n//         }\n// ],\n//\n// If you specify both \"triggerOn\" and \"triggerOff\" values to a button it will generate \n// different triggers for the two different status of the switch.\n// If you only specify the \"trigger\" value to a button it behaves like a push button\n// generating the trigger after the selection of the button and automatically returning\n// to the off status.\n//\n// When you attempt to add a device, it will ask for a \"PIN code\".\n// The default code for all HomeBridge accessories is 031-45-154.\n\n'use strict';\n\nvar Service, Characteristic;\nvar request = require(\"request\");\n\n\nfunction IFTTTPlatform(log, config){\n  \tthis.log          = log;\n  \tthis.makerkey     = config[\"makerkey\"];\n  \tthis.IFTTTaccessories = config[\"accessories\"];\n}\n\nmodule.exports = function(homebridge) {\n  Service = homebridge.hap.Service;\n  Characteristic = homebridge.hap.Characteristic;\n  \n  homebridge.registerPlatform(\"homebridge-ifttt\", \"IFTTT\", IFTTTPlatform);\n}\n\nIFTTTPlatform.prototype = {\n  accessories: function(callback) {\n      this.log(\"Loading accessories...\");\n\n      var that = this;\n      var foundAccessories = [];\n      if (this.IFTTTaccessories == null || this.IFTTTaccessories.length == 0) {\n      \tcallback(foundAccessories); \n      \treturn;\n      }\n\t  this.IFTTTaccessories.map(function(s) {\n\t\tthat.log(\"Found: \" + s.name);\n\t\t\tvar accessory = null;\n\t\t\tif (s.buttons.length != 0) {\n\t\t\t\tvar services = [];\n\t\t\t\tfor (var b = 0; b < s.buttons.length; b++) {\n\t\t\t\t\tvar service = {\n\t\t\t\t\t\tcontrolService: new Service.Switch(s.buttons[b].caption),\n\t\t\t\t\t\tcharacteristics: [Characteristic.On]\n\t\t\t\t\t};\n\t\t\t\t\tif (s.buttons[b].trigger != null)\n\t\t\t\t\t\tservice.controlService.subtype = s.buttons[b].trigger;\n\t\t\t\t\telse\n\t\t\t\t\t\tservice.controlService.subtype = s.buttons[b].triggerOn + s.buttons[b].triggerOff;\n\t\t\t\t\tservice.controlService.trigger = s.buttons[b].trigger;\n\t\t\t\t\tservice.controlService.triggerOn = s.buttons[b].triggerOn;\n\t\t\t\t\tservice.controlService.triggerOff = s.buttons[b].triggerOff;\n\t     \t\t   \tthat.log(\"Loading service: \" + service.controlService.displayName + \", subtype: \" + service.controlService.subtype);\n\t\t\t\t\tservices.push(service);\n\t\t\t\t}\n\t\t\t\taccessory = new IFTTTAccessory(services);\n\t\t\t}\n\t\t\tif (accessory != null) {\n\t\t\t\taccessory.getServices = function() {\n\t\t\t\t\t\treturn that.getServices(accessory);\n\t\t\t\t};\n\t\t\t\taccessory.platform \t\t\t= that;\n\t\t\t\taccessory.remoteAccessory\t= s;\n\t\t\t\taccessory.name\t\t\t\t= s.name;\n\t\t\t\taccessory.model\t\t\t\t= \"IFTTT\";\n\t\t\t\taccessory.manufacturer\t\t= \"IFTTT\";\n\t\t\t\taccessory.serialNumber\t\t= \"<unknown>\";\n\t\t\t\tfoundAccessories.push(accessory);\n\n\t\t\t}\n\t\t}\n\t  )\n      callback(foundAccessories);\n  },\n  command: function(c,value, that) {\n    var url = \"https://maker.ifttt.com/trigger/\"+c+\"/with/key/\"+this.makerkey;\n\tvar method = \"get\";\n    request({\n\t    url: url,\n\t\tmethod: method\n    }, function(err, response) {\n      if (err) {\n        that.platform.log(\"There was a problem sending command \" + c + \" to\" + that.name);\n        that.platform.log(url);\n      } else {\n        that.platform.log(that.name + \" sent command \" + c);\n        that.platform.log(url);\n      }\n    });\n  },\n  getInformationService: function(homebridgeAccessory) {\n    var informationService = new Service.AccessoryInformation();\n    informationService\n                .setCharacteristic(Characteristic.Name, homebridgeAccessory.name)\n\t\t\t\t.setCharacteristic(Characteristic.Manufacturer, homebridgeAccessory.manufacturer)\n\t\t\t    .setCharacteristic(Characteristic.Model, homebridgeAccessory.model)\n\t\t\t    .setCharacteristic(Characteristic.SerialNumber, homebridgeAccessory.serialNumber);\n  \treturn informationService;\n  },\n  bindCharacteristicEvents: function(characteristic, service, homebridgeAccessory) {\n  \tvar onOff = characteristic.props.format == \"bool\" ? true : false;\n    \tcharacteristic\n\t\t.on('set', function(value, callback, context) {\n\t\t\t\t\t\tif(context !== 'fromSetValue') {\n\t\t\t\t\t\t\tvar trigger = null;\n\t\t\t\t\t\t\tif (service.controlService.trigger != null)\n\t\t\t\t\t\t\t\ttrigger = service.controlService.trigger;\n\t\t\t\t\t\t\telse if (value == 0) \n\t\t\t\t\t\t\t\ttrigger = service.controlService.triggerOff;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\ttrigger = service.controlService.triggerOn;\n\n\t\t\t\t\t\t\thomebridgeAccessory.platform.command(trigger, \"\", homebridgeAccessory);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (service.controlService.trigger != null) {\n\t\t\t\t\t\t\t\t// In order to behave like a push button reset the status to off\n\t\t\t\t\t\t\t\tsetTimeout( function(){\n\t\t\t\t\t\t\t\t\tcharacteristic.setValue(false, undefined, 'fromSetValue');\n\t\t\t\t\t\t\t\t}, 100 );\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t} \n\t\t\t\t\t\tcallback();\n\t\t\t\t   }.bind(this) );\n    characteristic\n        .on('get', function(callback) {\n\t\t\t\t\t\t// a push button is normally off\n\t\t\t\t\t\tcallback(undefined, false);\n                   }.bind(this) );\n  },\n  getServices: function(homebridgeAccessory) {\n  \tvar services = [];\n  \tvar informationService = homebridgeAccessory.platform.getInformationService(homebridgeAccessory);\n  \tservices.push(informationService);\n  \tfor (var s = 0; s < homebridgeAccessory.services.length; s++) {\n\t\tvar service = homebridgeAccessory.services[s];\n\t\tfor (var i=0; i < service.characteristics.length; i++) {\n\t\t\tvar characteristic = service.controlService.getCharacteristic(service.characteristics[i]);\n\t\t\tif (characteristic == undefined)\n\t\t\t\tcharacteristic = service.controlService.addCharacteristic(service.characteristics[i]);\n\t\t\thomebridgeAccessory.platform.bindCharacteristicEvents(characteristic, service, homebridgeAccessory);\n\t\t}\n\t\tservices.push(service.controlService);\n    }\n    return services;\n  }  \n}\n\nfunction IFTTTAccessory(services) {\n    this.services = services;\n}\n"}